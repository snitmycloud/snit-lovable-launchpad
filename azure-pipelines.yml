
trigger:
- main
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18.x'
  sonarQubeServiceConnection: 'SonarQube-Connection' # Update this with your actual service connection name
  sonarQubeProjectKey: 'snit-solutions-website'
  sonarQubeProjectName: 'SNIT Solutions Website'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: ~/.npm
      displayName: 'Cache npm'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run lint
      displayName: 'Run ESLint'
      continueOnError: true

    - script: |
        npm run build
      displayName: 'Build application'

    - script: |
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      displayName: 'Run tests with coverage'
      continueOnError: true

    - task: SonarQubePrepare@5
      inputs:
        SonarQube: $(sonarQubeServiceConnection)
        scannerMode: 'CLI'
        configMode: 'file'
        cliProjectKey: $(sonarQubeProjectKey)
        cliProjectName: $(sonarQubeProjectName)
        cliSources: 'src'
        extraProperties: |
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.testExecutionReportPaths=test-report.xml
          sonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx,src/main.tsx,src/vite-env.d.ts
          sonar.cpd.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx
      displayName: 'Prepare SonarQube analysis'

    - task: SonarQubeAnalyze@5
      displayName: 'Run SonarQube analysis'

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarQube results'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test-report.xml'
        failTaskOnFailedTests: false
      displayName: 'Publish test results'
      condition: always()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage/cobertura-coverage.xml'
        reportDirectory: 'coverage'
      displayName: 'Publish code coverage'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'dist'
        artifactName: 'build-artifacts'
      displayName: 'Publish build artifacts'
      condition: succeeded()
